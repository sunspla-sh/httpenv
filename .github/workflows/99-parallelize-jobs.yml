---
name: 99 Parallelize Jobs

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-test-image:
    name: Build Test Image
    runs-on: ubuntu-latest
    steps:
      -
        name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and Export Docker Image
        uses: docker/build-push-action@v5
        with:
          tags: ${{ github.run_id }}
          outputs: type=docker,dest=/tmp/${{ github.run_id }}_test_httpenv_image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      -
        name: Upload Artifact (Docker Image)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.run_id }}_test_httpenv_image
          path: /tmp/${{ github.run_id }}_test_httpenv_image.tar
          retention-days: 1
          if-no-files-found: error
  test-unit:
    name: Unit Test With Docker Image
    needs: [build-test-image]
    runs-on: ubuntu-latest
    steps:
      -
        name: Download Artifact (Docker Image)
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.run_id }}_test_httpenv_image
          path: /tmp
      -
        name: Load Docker Image
        run: |
          docker load --input /tmp/${{ github.run_id }}_test_httpenv_image.tar
      -
        name: Unit Testing With Docker Image
        run: |
          docker run --rm ${{ github.run_id }} echo "run test commands here >:D"
  test-integration:
    name: Integration Test With Docker Image
    needs: [build-test-image]
    runs-on: ubuntu-latest
    steps:
      -
        name: Download Artifact (Docker Image)
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.run_id}}_test_httpenv_image
          path: /tmp
      -
        name: Load Docker Image
        run: |
          docker load --input /tmp/${{ github.run_id }}_test_httpenv_image.tar
      -
        name: Test Healthcheck In Docker Compose
        run: |
          export TESTING_IMAGE="${{ github.run_id }}"
          docker compose -f docker-compose.test.yml up --exit-code-from sut
  test-k3d:
    name: Test Deployment In Kubernetes
    needs: [build-test-image]
    runs-on: ubuntu-latest
    steps:
      -
        name: Download Artifact (Docker Image)
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.run_id }}_test_httpenv_image
          path: /tmp
      -
        name: Load Docker Image
        run: |
          docker load --input /tmp/${{ github.run_id }}_test_httpenv_image.tar
      -
        name: Create K3d Kubernetes Cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
      -
        name: Import Docker Image To K3d Kubernetes Cluster
        run: k3d image import ${{ github.run_id }} -c "test-cluster-1" --verbose
      -
        name: Smoke Test Deployment In K3d Kubernetes Cluster
        run: |
          export TESTING_IMAGE=${{ github.run_id }}
          envsubst < manifests/deployment.yml | kubectl apply -f -
          kubectl rollout status deployment myapp
          kubectl exec deploy/myapp -- curl --fail localhost:8888
  scan-image:
    name: Scan Docker Image With Trivy
    needs: [build-test-image]
    permissions:
      security-events: write # Needed to upload SARIF results
    runs-on: ubuntu-latest
    steps:
      -
        name: Download Artifact (Docker Image)
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.run_id }}_test_httpenv_image
          path: /tmp
      -
        name: Load Docker Image
        run: |
          docker load --input /tmp/${{ github.run_id }}_test_httpenv_image.tar
      -
        name: Run Trivy For All CVEs (Non-Blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          format: table
          exit-code: 0
      -
        name: Run Trivy For HIGH,CRITICAL CVEs and Report (Blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 1
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL
          format: sarif
          limit-severities-for-sarif: true
          output: 'trivy-results.sarif'
      -
        name: Upload Trivy Scan Results To GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
  build-final-image:
    name: Build Final Image
    needs: [test-unit, test-integration, test-k3d, scan-image]
    runs-on: ubuntu-latest
    permissions:
      packages: write # Needed to push Docker Images to ghcr.io
      pull-requests: write # Needed to create and update comments in PRs
    steps:
      -
        name: Set Up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Log In To Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      -
        name: Log In To GitHub Container Registry (ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Docker Metadata For Final Image Build
        id: docker_metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/docker-ci-automation,ghcr.io/${{ github.actor }}/docker-ci-automation
          flavor: |
            latest=false
          tags: |
            type=raw,value=99
          # the following lines are commented out so as not to conflict with 04-add-metadata.yml
            # type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            # type=ref,event=pr
            # type=ref,event=branch
            # type=semver,pattern={{version}}
      -
        name: Docker Build and Push To Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.docker_metadata.outputs.tags }}
          labels: ${{ steps.docker_metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64,linux/arm/v7
      -
        name: Find Comment For Image Tags
        uses: peter-evans/find-comment@v3
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed
      -
        name: Create Or Update Comment For Image Tags
        uses: peter-evans/create-or-update-comment@v4
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_metadata.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_metadata.outputs.labels }}
            ```
          edit-mode: replace